{
  "name": "tab",
  "version": "0.1.0",
  "description": "Unix-style tables for command-line utilities",
  "main": "lib/tab.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/davepacheco/node-tab"
  },
  "keywords": [
    "cli",
    "unix",
    "table"
  ],
  "author": {
    "name": "Dave Pacheco",
    "email": "dap@joyent.com"
  },
  "license": "MIT",
  "dependencies": {
    "assert-plus": "0.1.0",
    "carrier": "0.1.7",
    "extsprintf": "1.0.1",
    "strsplit": "1.0.0"
  },
  "readme": "# node-tab: Unix-style tables for command-line utilities\n\nThis module implements functions for reading and writing Unix-style command line\ntables.  The model mimics that of traditional Unix commands like \"ps\", which\nemit a table with a default set of columns that can be customized using command\nline options.  This module implements facilities to both ingest and emit these\ntables.\n\n## Output overview\n\n### Simple tables\n\nTo write a simple table to stdout:\n\n    var mod_tab = require('tab');\n\n    mod_tab.emitTable({\n        'columns': [ 'PID', 'TTY', 'TIME', 'CMD' ],\n        'rows': [\n            [ '60881', 'ttys000', '0:00.19', '-bash' ],\n            [ '61674', 'ttys000', '0:00.17', 'vim README.md' ]\n        ]\n    });\n\nThis outputs:\n\n   PID TTY TIME CMD \n   60881 ttys000 0:00.19 -bash \n   61674 ttys000 0:00.17 vim README.md \n\n### Alternate output stream\n\nYou can send this to a stream like stderr instead by specifying the 'stream'\nproperty:\n\n    mod_tab.emitTable({\n        'stream': process.stderr,\n        'columns': [ 'PID', 'TTY', 'TIME', 'CMD' ],\n        'rows': [\n            [ '60881', 'ttys000', '0:00.19', '-bash' ],\n            [ '61674', 'ttys000', '0:00.17', 'vim README.md' ]\n        ]\n    });\n\n### Controlling field width and alignment\n\nTo make the output look more like ps(1), you could specify field widths and\nalignments:\n\n    mod_tab.emitTable({\n        'columns': [ {\n            'label': 'PID',\n            'align': 'right',\n            'width': 6\n        }, {\n            'label': 'TTY',\n            'width': 7\n        }, {\n            'label': 'TIME',\n            'align': 'right',\n            'width': 10\n        }, {\n            'label': 'CMD'\n        } ],\n\n        'rows': [\n            [ '60881', 'ttys000', '0:00.19', '-bash' ],\n            [ '61674', 'ttys000', '0:00.17', 'vim README.md' ]\n        ]\n    });\n\nThis would output:\n\n      PID TTY           TIME CMD\n    60881 ttys000    0:00.19 -bash\n    61674 ttys000    0:00.17 vim README.md\n\n### Using objects for rows\n\nIf you want, data (rows) can be specified with objects instead of arrays, where\nthe object keys keys correspond to field labels.  This example outputs the same\nas the previous one:\n\n    mod_tab.emitTable({\n        'columns': [ {\n            'label': 'PID',\n            'align': 'right',\n            'width': 6\n        }, {\n            'label': 'TTY',\n            'width': 7,\n        }, {\n            'label': 'TIME',\n            'align': 'right',\n            'width': 10\n        }, {\n            'label': 'CMD'\n        } ],\n\n        'rows': [ {\n            'PID': '60881',\n            'TTY': 'ttys000',\n            'TIME': '0:00.19',\n            'CMD': '-bash'\n        }, {\n            'PID': '61674',\n            'TTY': 'ttys000',\n            'TIME': '0:00.17',\n            'CMD': 'vim README.md'\n        } ]\n    });\n\n### Streaming interface\n\nInstead of accumulating the data in memory and emitting the whole table, you can\ncreate a TableOutputStream object with the field configuration and then emit\nindividual records:\n\n    var out = new mod_tab.TableOutputStream({\n        'columns': [ 'PID', 'TTY', 'TIME', 'CMD' ]\n    });\n\n    out.writeRow([ '60881', 'ttys000', '0:00.19', '-bash' ]);\n\n    /* or */\n\n    out.writeRow({\n        'PID': '61674',\n        'TTY': 'ttys000',\n        'TIME': '0:00.17',\n        'CMD': 'vim README.md'\n    });\n\n\n### Other options\n\nYou can also omit the header row or change the column and row separators:\n\n    mod_tab.emitTable({\n        'columns': [ 'name', 'passwd', 'uid', 'gid', 'gecos', 'home', 'shell' ],\n\t'columnSeparator': ':',\n\t'rowSeparator': ';\\n',\n\t'omitHeader': true,\n        'rows': [\n            [ 'root', '*', '0', '0', 'Admin', '/var/root', '/bin/sh' ],\n            [ 'nobody', '*', '-2', '-2', 'Unpriv', '/var/empty', '/usr/bin/false' ]\n        ]\n    });\n\n\n## Input overview\n\nThe goal of the input interface is to ingest such tables as either objects or\narrays (as desired).\n\nTo ingest streaming tabular input, create a TableInputStream and listen for the\n\"row\" event:\n\n    var input = new mod_tab.TableInputStream({\n        'stream': process.stdin,\n        'columns': [ 'pid', 'tty', 'time', 'cmd' ]\n    });\n\n    input.on('row', console.log);\n\nFor the above outputs, this would emit:\n\n    { pid: '60881',\n      tty: 'ttys000',\n      time: '0:00.19',\n      cmd: '-bash' }\n    { pid: '61674',\n      tty: 'ttys000',\n      time: '0:00.17',\n      cmd: 'vim README.md' }\n\nIf the first row is the header row, you can leave off \"columns\":\n\n    var input = new mod_tab.TableInputStream({ 'stream': process.stdin });\n    input.on('row', console.log);\n\nPipe \"ps\" to that and get:\n\n    { PID: '60881',\n      TTY: 'ttys000',\n      TIME: '0:00.19',\n      CMD: '-bash' }\n    { PID: '61674',\n      TTY: 'ttys000',\n      TIME: '0:00.17',\n      CMD: 'vim README.md' }\n\nYou could get arrays instead by specifying the 'format' property:\n\n    var input = new mod_tab.TableInputStream({\n        'format': 'array',\n        'stream': process.stdin,\n    });\n\n    input.on('row', function (row) {\n        console.log(row);\n    });\n\nThis would emit:\n\n    [ '60881', 'ttys000', '0:00.19', '-bash' ]\n    [ '61674', 'ttys000', '0:00.17', 'vim README.md' ]\n\nYou can also specify a different delimiter from the default (which is any\nwhitespace) using a string or regular expression for the 'delim' property, as\nin:\n\n    /* split on colons instead of whitespace */\n    var input = new mod_tab.TableInputStream({\n        'delim': ':'\n        'stream': process.stdin,\n        'columns': [ 'pid', 'tty', 'time', 'cmd' ]\n    });\n\n    /* split on semicolon or comma */\n    var input = new mod_tab.TableInputStream({\n        'delim': /[,;]/,\n        'stream': process.stdin,\n        'columns': [ 'pid', 'tty', 'time', 'cmd' ]\n    });\n",
  "readmeFilename": "README.md",
  "_id": "tab@0.1.0",
  "dist": {
    "shasum": "20b14dcf5150ae06acfe487d73579c24347624ab"
  },
  "_from": "tab"
}
