// Generated by CoffeeScript 1.4.0
(function() {
  var colors, dateFormat, events, log_event, nFn, options;

  log_event = function(options) {
    this.story = options.story;
    this.level = options.level || 0;
    return this.color = options.color || "green";
  };

  "use strict";


  dateFormat = require("dateformat");

  colors = require("colors");

  events = {};

  options = {
    level: 0,
    format: "%timestamp% - %story%:%padding%  %message%",
    timestamp: "HH:MM:ss"
  };

  log_event.prototype.config = function(config) {
    var key;
    for (key in config) {
      this[key] = config[key];
    }
    return this;
  };

  log_event.prototype.__defineGetter__("padding", function() {
    var i, key, length, padding;
    length = 0;
    padding = "";
    for (key in events) {
      if (events.hasOwnProperty(key)) {
        length = (length < events[key].story.length ? events[key].story.length : length);
      }
    }
    i = 0;
    while (i < length - this.story.length) {
      padding += " ";
      i++;
    }
    return padding;
  });

  log_event.prototype.output = function(input) {
    var format, i, message, output;
    if (options.level <= this.level) {
      message = "";
      for (i in input) {
        message += " " + (typeof input[i] === "object" ? JSON.stringify(input[i], null) : input[i]);
      }
      format = this.format || options.format;
      output = format.replace("%timestamp%", dateFormat(new Date(), this.timestamp || options.timestamp)).replace("%story%", this.event[this.color]).replace("%padding%", this.padding).replace("%message%", message);
      return console.log(output);
    }
  };

  exports.config = function(config) {
    var key;
    for (key in config) {
      if (options.hasOwnProperty(key)) {
        options[key] = config[key];
      }
    }
    return this;
  };

  nFn = function(e) {
    return function() {
      if (arguments_.length === 0) {
        return events[e];
      } else {
        return events[e].output(arguments_);
      }
    };
  };

  exports.create = function(newEvents) {
    var story;
    for (story in newEvents) {
      events[story] = new log_event(newEvents[story]);
      this[story] = nFn(story);
    }
    return this;
  };

  exports.create({
    info: {
      color: "green",
      level: 0,
      story: "info"
    },
    warn: {
      color: "yellow",
      level: 1,
      story: "warning"
    },
    error: {
      color: "red",
      level: 2,
      story: "error"
    }
  });

}).call(this);
